// Code generated by protoc-gen-go. DO NOT EDIT.
// source: idm.proto

package rest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import idm "github.com/pydio/cells/common/proto/idm"
import service "github.com/pydio/cells/common/service/proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ResourcePolicyQuery_QueryType int32

const (
	ResourcePolicyQuery_CONTEXT ResourcePolicyQuery_QueryType = 0
	ResourcePolicyQuery_ANY     ResourcePolicyQuery_QueryType = 1
	ResourcePolicyQuery_NONE    ResourcePolicyQuery_QueryType = 2
	ResourcePolicyQuery_USER    ResourcePolicyQuery_QueryType = 3
)

var ResourcePolicyQuery_QueryType_name = map[int32]string{
	0: "CONTEXT",
	1: "ANY",
	2: "NONE",
	3: "USER",
}
var ResourcePolicyQuery_QueryType_value = map[string]int32{
	"CONTEXT": 0,
	"ANY":     1,
	"NONE":    2,
	"USER":    3,
}

func (x ResourcePolicyQuery_QueryType) String() string {
	return proto.EnumName(ResourcePolicyQuery_QueryType_name, int32(x))
}
func (ResourcePolicyQuery_QueryType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor6, []int{0, 0}
}

// Generic Query for limiting results based on resource permissions
type ResourcePolicyQuery struct {
	Type   ResourcePolicyQuery_QueryType `protobuf:"varint,1,opt,name=Type,enum=rest.ResourcePolicyQuery_QueryType" json:"Type,omitempty"`
	UserId string                        `protobuf:"bytes,2,opt,name=UserId" json:"UserId,omitempty"`
}

func (m *ResourcePolicyQuery) Reset()                    { *m = ResourcePolicyQuery{} }
func (m *ResourcePolicyQuery) String() string            { return proto.CompactTextString(m) }
func (*ResourcePolicyQuery) ProtoMessage()               {}
func (*ResourcePolicyQuery) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *ResourcePolicyQuery) GetType() ResourcePolicyQuery_QueryType {
	if m != nil {
		return m.Type
	}
	return ResourcePolicyQuery_CONTEXT
}

func (m *ResourcePolicyQuery) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

// Roles Search
type SearchRoleRequest struct {
	Queries             []*idm.RoleSingleQuery `protobuf:"bytes,1,rep,name=Queries" json:"Queries,omitempty"`
	ResourcePolicyQuery *ResourcePolicyQuery   `protobuf:"bytes,7,opt,name=ResourcePolicyQuery" json:"ResourcePolicyQuery,omitempty"`
	Offset              int64                  `protobuf:"varint,2,opt,name=Offset" json:"Offset,omitempty"`
	Limit               int64                  `protobuf:"varint,3,opt,name=Limit" json:"Limit,omitempty"`
	GroupBy             int32                  `protobuf:"varint,4,opt,name=GroupBy" json:"GroupBy,omitempty"`
	CountOnly           bool                   `protobuf:"varint,5,opt,name=CountOnly" json:"CountOnly,omitempty"`
	Operation           service.OperationType  `protobuf:"varint,6,opt,name=Operation,enum=service.OperationType" json:"Operation,omitempty"`
}

func (m *SearchRoleRequest) Reset()                    { *m = SearchRoleRequest{} }
func (m *SearchRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchRoleRequest) ProtoMessage()               {}
func (*SearchRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *SearchRoleRequest) GetQueries() []*idm.RoleSingleQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *SearchRoleRequest) GetResourcePolicyQuery() *ResourcePolicyQuery {
	if m != nil {
		return m.ResourcePolicyQuery
	}
	return nil
}

func (m *SearchRoleRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchRoleRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchRoleRequest) GetGroupBy() int32 {
	if m != nil {
		return m.GroupBy
	}
	return 0
}

func (m *SearchRoleRequest) GetCountOnly() bool {
	if m != nil {
		return m.CountOnly
	}
	return false
}

func (m *SearchRoleRequest) GetOperation() service.OperationType {
	if m != nil {
		return m.Operation
	}
	return service.OperationType_OR
}

// Roles Collection
type RolesCollection struct {
	Roles []*idm.Role `protobuf:"bytes,1,rep,name=Roles" json:"Roles,omitempty"`
}

func (m *RolesCollection) Reset()                    { *m = RolesCollection{} }
func (m *RolesCollection) String() string            { return proto.CompactTextString(m) }
func (*RolesCollection) ProtoMessage()               {}
func (*RolesCollection) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *RolesCollection) GetRoles() []*idm.Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

// Users Search
type SearchUserRequest struct {
	Queries             []*idm.UserSingleQuery `protobuf:"bytes,1,rep,name=Queries" json:"Queries,omitempty"`
	ResourcePolicyQuery *ResourcePolicyQuery   `protobuf:"bytes,7,opt,name=ResourcePolicyQuery" json:"ResourcePolicyQuery,omitempty"`
	Offset              int64                  `protobuf:"varint,2,opt,name=Offset" json:"Offset,omitempty"`
	Limit               int64                  `protobuf:"varint,3,opt,name=Limit" json:"Limit,omitempty"`
	GroupBy             int32                  `protobuf:"varint,4,opt,name=GroupBy" json:"GroupBy,omitempty"`
	CountOnly           bool                   `protobuf:"varint,5,opt,name=CountOnly" json:"CountOnly,omitempty"`
	Operation           service.OperationType  `protobuf:"varint,6,opt,name=Operation,enum=service.OperationType" json:"Operation,omitempty"`
}

func (m *SearchUserRequest) Reset()                    { *m = SearchUserRequest{} }
func (m *SearchUserRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchUserRequest) ProtoMessage()               {}
func (*SearchUserRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *SearchUserRequest) GetQueries() []*idm.UserSingleQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *SearchUserRequest) GetResourcePolicyQuery() *ResourcePolicyQuery {
	if m != nil {
		return m.ResourcePolicyQuery
	}
	return nil
}

func (m *SearchUserRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchUserRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchUserRequest) GetGroupBy() int32 {
	if m != nil {
		return m.GroupBy
	}
	return 0
}

func (m *SearchUserRequest) GetCountOnly() bool {
	if m != nil {
		return m.CountOnly
	}
	return false
}

func (m *SearchUserRequest) GetOperation() service.OperationType {
	if m != nil {
		return m.Operation
	}
	return service.OperationType_OR
}

// Users Collection
type UsersCollection struct {
	Groups []*idm.User `protobuf:"bytes,1,rep,name=Groups" json:"Groups,omitempty"`
	Users  []*idm.User `protobuf:"bytes,2,rep,name=Users" json:"Users,omitempty"`
	Total  int32       `protobuf:"varint,3,opt,name=Total" json:"Total,omitempty"`
}

func (m *UsersCollection) Reset()                    { *m = UsersCollection{} }
func (m *UsersCollection) String() string            { return proto.CompactTextString(m) }
func (*UsersCollection) ProtoMessage()               {}
func (*UsersCollection) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *UsersCollection) GetGroups() []*idm.User {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *UsersCollection) GetUsers() []*idm.User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *UsersCollection) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// Binding Response
type BindResponse struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *BindResponse) Reset()                    { *m = BindResponse{} }
func (m *BindResponse) String() string            { return proto.CompactTextString(m) }
func (*BindResponse) ProtoMessage()               {}
func (*BindResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{5} }

func (m *BindResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

// Rest request for ACL's
type SearchACLRequest struct {
	Queries   []*idm.ACLSingleQuery `protobuf:"bytes,1,rep,name=Queries" json:"Queries,omitempty"`
	Offset    int64                 `protobuf:"varint,2,opt,name=Offset" json:"Offset,omitempty"`
	Limit     int64                 `protobuf:"varint,3,opt,name=Limit" json:"Limit,omitempty"`
	GroupBy   int32                 `protobuf:"varint,4,opt,name=GroupBy" json:"GroupBy,omitempty"`
	CountOnly bool                  `protobuf:"varint,5,opt,name=CountOnly" json:"CountOnly,omitempty"`
	Operation service.OperationType `protobuf:"varint,6,opt,name=Operation,enum=service.OperationType" json:"Operation,omitempty"`
}

func (m *SearchACLRequest) Reset()                    { *m = SearchACLRequest{} }
func (m *SearchACLRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchACLRequest) ProtoMessage()               {}
func (*SearchACLRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{6} }

func (m *SearchACLRequest) GetQueries() []*idm.ACLSingleQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *SearchACLRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchACLRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchACLRequest) GetGroupBy() int32 {
	if m != nil {
		return m.GroupBy
	}
	return 0
}

func (m *SearchACLRequest) GetCountOnly() bool {
	if m != nil {
		return m.CountOnly
	}
	return false
}

func (m *SearchACLRequest) GetOperation() service.OperationType {
	if m != nil {
		return m.Operation
	}
	return service.OperationType_OR
}

// Response for search request
type ACLCollection struct {
	ACLs  []*idm.ACL `protobuf:"bytes,1,rep,name=ACLs" json:"ACLs,omitempty"`
	Total int32      `protobuf:"varint,2,opt,name=Total" json:"Total,omitempty"`
}

func (m *ACLCollection) Reset()                    { *m = ACLCollection{} }
func (m *ACLCollection) String() string            { return proto.CompactTextString(m) }
func (*ACLCollection) ProtoMessage()               {}
func (*ACLCollection) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{7} }

func (m *ACLCollection) GetACLs() []*idm.ACL {
	if m != nil {
		return m.ACLs
	}
	return nil
}

func (m *ACLCollection) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// Rest request for searching workspaces
type SearchWorkspaceRequest struct {
	Queries             []*idm.WorkspaceSingleQuery `protobuf:"bytes,1,rep,name=Queries" json:"Queries,omitempty"`
	ResourcePolicyQuery *ResourcePolicyQuery        `protobuf:"bytes,7,opt,name=ResourcePolicyQuery" json:"ResourcePolicyQuery,omitempty"`
	Offset              int64                       `protobuf:"varint,2,opt,name=Offset" json:"Offset,omitempty"`
	Limit               int64                       `protobuf:"varint,3,opt,name=Limit" json:"Limit,omitempty"`
	GroupBy             int32                       `protobuf:"varint,4,opt,name=GroupBy" json:"GroupBy,omitempty"`
	CountOnly           bool                        `protobuf:"varint,5,opt,name=CountOnly" json:"CountOnly,omitempty"`
	Operation           service.OperationType       `protobuf:"varint,6,opt,name=Operation,enum=service.OperationType" json:"Operation,omitempty"`
}

func (m *SearchWorkspaceRequest) Reset()                    { *m = SearchWorkspaceRequest{} }
func (m *SearchWorkspaceRequest) String() string            { return proto.CompactTextString(m) }
func (*SearchWorkspaceRequest) ProtoMessage()               {}
func (*SearchWorkspaceRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{8} }

func (m *SearchWorkspaceRequest) GetQueries() []*idm.WorkspaceSingleQuery {
	if m != nil {
		return m.Queries
	}
	return nil
}

func (m *SearchWorkspaceRequest) GetResourcePolicyQuery() *ResourcePolicyQuery {
	if m != nil {
		return m.ResourcePolicyQuery
	}
	return nil
}

func (m *SearchWorkspaceRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *SearchWorkspaceRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *SearchWorkspaceRequest) GetGroupBy() int32 {
	if m != nil {
		return m.GroupBy
	}
	return 0
}

func (m *SearchWorkspaceRequest) GetCountOnly() bool {
	if m != nil {
		return m.CountOnly
	}
	return false
}

func (m *SearchWorkspaceRequest) GetOperation() service.OperationType {
	if m != nil {
		return m.Operation
	}
	return service.OperationType_OR
}

// Rest response for workspace search
type WorkspaceCollection struct {
	Workspaces []*idm.Workspace `protobuf:"bytes,1,rep,name=Workspaces" json:"Workspaces,omitempty"`
	Total      int32            `protobuf:"varint,2,opt,name=Total" json:"Total,omitempty"`
}

func (m *WorkspaceCollection) Reset()                    { *m = WorkspaceCollection{} }
func (m *WorkspaceCollection) String() string            { return proto.CompactTextString(m) }
func (*WorkspaceCollection) ProtoMessage()               {}
func (*WorkspaceCollection) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{9} }

func (m *WorkspaceCollection) GetWorkspaces() []*idm.Workspace {
	if m != nil {
		return m.Workspaces
	}
	return nil
}

func (m *WorkspaceCollection) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// Collection of UserMeta
type UserMetaCollection struct {
	Metadatas []*idm.UserMeta `protobuf:"bytes,1,rep,name=Metadatas" json:"Metadatas,omitempty"`
}

func (m *UserMetaCollection) Reset()                    { *m = UserMetaCollection{} }
func (m *UserMetaCollection) String() string            { return proto.CompactTextString(m) }
func (*UserMetaCollection) ProtoMessage()               {}
func (*UserMetaCollection) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{10} }

func (m *UserMetaCollection) GetMetadatas() []*idm.UserMeta {
	if m != nil {
		return m.Metadatas
	}
	return nil
}

// Collection of Meta Namespaces
type UserMetaNamespaceCollection struct {
	Namespaces []*idm.UserMetaNamespace `protobuf:"bytes,1,rep,name=Namespaces" json:"Namespaces,omitempty"`
}

func (m *UserMetaNamespaceCollection) Reset()                    { *m = UserMetaNamespaceCollection{} }
func (m *UserMetaNamespaceCollection) String() string            { return proto.CompactTextString(m) }
func (*UserMetaNamespaceCollection) ProtoMessage()               {}
func (*UserMetaNamespaceCollection) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{11} }

func (m *UserMetaNamespaceCollection) GetNamespaces() []*idm.UserMetaNamespace {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

type ListUserMetaTagsRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=Namespace" json:"Namespace,omitempty"`
}

func (m *ListUserMetaTagsRequest) Reset()                    { *m = ListUserMetaTagsRequest{} }
func (m *ListUserMetaTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListUserMetaTagsRequest) ProtoMessage()               {}
func (*ListUserMetaTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{12} }

func (m *ListUserMetaTagsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

type ListUserMetaTagsResponse struct {
	Tags []string `protobuf:"bytes,1,rep,name=Tags" json:"Tags,omitempty"`
}

func (m *ListUserMetaTagsResponse) Reset()                    { *m = ListUserMetaTagsResponse{} }
func (m *ListUserMetaTagsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListUserMetaTagsResponse) ProtoMessage()               {}
func (*ListUserMetaTagsResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{13} }

func (m *ListUserMetaTagsResponse) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

type PutUserMetaTagRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=Namespace" json:"Namespace,omitempty"`
	Tag       string `protobuf:"bytes,2,opt,name=Tag" json:"Tag,omitempty"`
}

func (m *PutUserMetaTagRequest) Reset()                    { *m = PutUserMetaTagRequest{} }
func (m *PutUserMetaTagRequest) String() string            { return proto.CompactTextString(m) }
func (*PutUserMetaTagRequest) ProtoMessage()               {}
func (*PutUserMetaTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{14} }

func (m *PutUserMetaTagRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PutUserMetaTagRequest) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

type PutUserMetaTagResponse struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *PutUserMetaTagResponse) Reset()                    { *m = PutUserMetaTagResponse{} }
func (m *PutUserMetaTagResponse) String() string            { return proto.CompactTextString(m) }
func (*PutUserMetaTagResponse) ProtoMessage()               {}
func (*PutUserMetaTagResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{15} }

func (m *PutUserMetaTagResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type DeleteUserMetaTagsRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=Namespace" json:"Namespace,omitempty"`
	Tags      string `protobuf:"bytes,2,opt,name=Tags" json:"Tags,omitempty"`
}

func (m *DeleteUserMetaTagsRequest) Reset()                    { *m = DeleteUserMetaTagsRequest{} }
func (m *DeleteUserMetaTagsRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserMetaTagsRequest) ProtoMessage()               {}
func (*DeleteUserMetaTagsRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{16} }

func (m *DeleteUserMetaTagsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *DeleteUserMetaTagsRequest) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

type DeleteUserMetaTagsResponse struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *DeleteUserMetaTagsResponse) Reset()                    { *m = DeleteUserMetaTagsResponse{} }
func (m *DeleteUserMetaTagsResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteUserMetaTagsResponse) ProtoMessage()               {}
func (*DeleteUserMetaTagsResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{17} }

func (m *DeleteUserMetaTagsResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type UserBookmarksRequest struct {
}

func (m *UserBookmarksRequest) Reset()                    { *m = UserBookmarksRequest{} }
func (m *UserBookmarksRequest) String() string            { return proto.CompactTextString(m) }
func (*UserBookmarksRequest) ProtoMessage()               {}
func (*UserBookmarksRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{18} }

// Rest request for revocation. Token is not mandatory, if not set
// request will use current JWT token
type RevokeRequest struct {
	TokenId string `protobuf:"bytes,1,opt,name=TokenId" json:"TokenId,omitempty"`
}

func (m *RevokeRequest) Reset()                    { *m = RevokeRequest{} }
func (m *RevokeRequest) String() string            { return proto.CompactTextString(m) }
func (*RevokeRequest) ProtoMessage()               {}
func (*RevokeRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{19} }

func (m *RevokeRequest) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

// Rest response
type RevokeResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
}

func (m *RevokeResponse) Reset()                    { *m = RevokeResponse{} }
func (m *RevokeResponse) String() string            { return proto.CompactTextString(m) }
func (*RevokeResponse) ProtoMessage()               {}
func (*RevokeResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{20} }

func (m *RevokeResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *RevokeResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ResetPasswordTokenRequest struct {
	UserLogin string `protobuf:"bytes,1,opt,name=UserLogin" json:"UserLogin,omitempty"`
}

func (m *ResetPasswordTokenRequest) Reset()                    { *m = ResetPasswordTokenRequest{} }
func (m *ResetPasswordTokenRequest) String() string            { return proto.CompactTextString(m) }
func (*ResetPasswordTokenRequest) ProtoMessage()               {}
func (*ResetPasswordTokenRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{21} }

func (m *ResetPasswordTokenRequest) GetUserLogin() string {
	if m != nil {
		return m.UserLogin
	}
	return ""
}

type ResetPasswordTokenResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
}

func (m *ResetPasswordTokenResponse) Reset()                    { *m = ResetPasswordTokenResponse{} }
func (m *ResetPasswordTokenResponse) String() string            { return proto.CompactTextString(m) }
func (*ResetPasswordTokenResponse) ProtoMessage()               {}
func (*ResetPasswordTokenResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{22} }

func (m *ResetPasswordTokenResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ResetPasswordTokenResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type ResetPasswordRequest struct {
	ResetPasswordToken string `protobuf:"bytes,1,opt,name=ResetPasswordToken" json:"ResetPasswordToken,omitempty"`
	UserLogin          string `protobuf:"bytes,2,opt,name=UserLogin" json:"UserLogin,omitempty"`
	NewPassword        string `protobuf:"bytes,3,opt,name=NewPassword" json:"NewPassword,omitempty"`
}

func (m *ResetPasswordRequest) Reset()                    { *m = ResetPasswordRequest{} }
func (m *ResetPasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*ResetPasswordRequest) ProtoMessage()               {}
func (*ResetPasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{23} }

func (m *ResetPasswordRequest) GetResetPasswordToken() string {
	if m != nil {
		return m.ResetPasswordToken
	}
	return ""
}

func (m *ResetPasswordRequest) GetUserLogin() string {
	if m != nil {
		return m.UserLogin
	}
	return ""
}

func (m *ResetPasswordRequest) GetNewPassword() string {
	if m != nil {
		return m.NewPassword
	}
	return ""
}

type ResetPasswordResponse struct {
	Success bool   `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message" json:"Message,omitempty"`
}

func (m *ResetPasswordResponse) Reset()                    { *m = ResetPasswordResponse{} }
func (m *ResetPasswordResponse) String() string            { return proto.CompactTextString(m) }
func (*ResetPasswordResponse) ProtoMessage()               {}
func (*ResetPasswordResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{24} }

func (m *ResetPasswordResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ResetPasswordResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type CallbackRequest struct {
	State   string `protobuf:"bytes,1,opt,name=state" json:"state,omitempty"`
	Code    string `protobuf:"bytes,2,opt,name=code" json:"code,omitempty"`
	IdToken string `protobuf:"bytes,3,opt,name=id_token,json=idToken" json:"id_token,omitempty"`
}

func (m *CallbackRequest) Reset()                    { *m = CallbackRequest{} }
func (m *CallbackRequest) String() string            { return proto.CompactTextString(m) }
func (*CallbackRequest) ProtoMessage()               {}
func (*CallbackRequest) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{25} }

func (m *CallbackRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *CallbackRequest) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *CallbackRequest) GetIdToken() string {
	if m != nil {
		return m.IdToken
	}
	return ""
}

type CallbackResponse struct {
	AccessToken  string `protobuf:"bytes,1,opt,name=AccessToken" json:"AccessToken,omitempty"`
	TokenType    string `protobuf:"bytes,2,opt,name=TokenType" json:"TokenType,omitempty"`
	ExpiresIn    int64  `protobuf:"varint,3,opt,name=ExpiresIn" json:"ExpiresIn,omitempty"`
	RefreshToken string `protobuf:"bytes,4,opt,name=RefreshToken" json:"RefreshToken,omitempty"`
	IDToken      string `protobuf:"bytes,5,opt,name=IDToken" json:"IDToken,omitempty"`
}

func (m *CallbackResponse) Reset()                    { *m = CallbackResponse{} }
func (m *CallbackResponse) String() string            { return proto.CompactTextString(m) }
func (*CallbackResponse) ProtoMessage()               {}
func (*CallbackResponse) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{26} }

func (m *CallbackResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *CallbackResponse) GetTokenType() string {
	if m != nil {
		return m.TokenType
	}
	return ""
}

func (m *CallbackResponse) GetExpiresIn() int64 {
	if m != nil {
		return m.ExpiresIn
	}
	return 0
}

func (m *CallbackResponse) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *CallbackResponse) GetIDToken() string {
	if m != nil {
		return m.IDToken
	}
	return ""
}

func init() {
	proto.RegisterType((*ResourcePolicyQuery)(nil), "rest.ResourcePolicyQuery")
	proto.RegisterType((*SearchRoleRequest)(nil), "rest.SearchRoleRequest")
	proto.RegisterType((*RolesCollection)(nil), "rest.RolesCollection")
	proto.RegisterType((*SearchUserRequest)(nil), "rest.SearchUserRequest")
	proto.RegisterType((*UsersCollection)(nil), "rest.UsersCollection")
	proto.RegisterType((*BindResponse)(nil), "rest.BindResponse")
	proto.RegisterType((*SearchACLRequest)(nil), "rest.SearchACLRequest")
	proto.RegisterType((*ACLCollection)(nil), "rest.ACLCollection")
	proto.RegisterType((*SearchWorkspaceRequest)(nil), "rest.SearchWorkspaceRequest")
	proto.RegisterType((*WorkspaceCollection)(nil), "rest.WorkspaceCollection")
	proto.RegisterType((*UserMetaCollection)(nil), "rest.UserMetaCollection")
	proto.RegisterType((*UserMetaNamespaceCollection)(nil), "rest.UserMetaNamespaceCollection")
	proto.RegisterType((*ListUserMetaTagsRequest)(nil), "rest.ListUserMetaTagsRequest")
	proto.RegisterType((*ListUserMetaTagsResponse)(nil), "rest.ListUserMetaTagsResponse")
	proto.RegisterType((*PutUserMetaTagRequest)(nil), "rest.PutUserMetaTagRequest")
	proto.RegisterType((*PutUserMetaTagResponse)(nil), "rest.PutUserMetaTagResponse")
	proto.RegisterType((*DeleteUserMetaTagsRequest)(nil), "rest.DeleteUserMetaTagsRequest")
	proto.RegisterType((*DeleteUserMetaTagsResponse)(nil), "rest.DeleteUserMetaTagsResponse")
	proto.RegisterType((*UserBookmarksRequest)(nil), "rest.UserBookmarksRequest")
	proto.RegisterType((*RevokeRequest)(nil), "rest.RevokeRequest")
	proto.RegisterType((*RevokeResponse)(nil), "rest.RevokeResponse")
	proto.RegisterType((*ResetPasswordTokenRequest)(nil), "rest.ResetPasswordTokenRequest")
	proto.RegisterType((*ResetPasswordTokenResponse)(nil), "rest.ResetPasswordTokenResponse")
	proto.RegisterType((*ResetPasswordRequest)(nil), "rest.ResetPasswordRequest")
	proto.RegisterType((*ResetPasswordResponse)(nil), "rest.ResetPasswordResponse")
	proto.RegisterType((*CallbackRequest)(nil), "rest.CallbackRequest")
	proto.RegisterType((*CallbackResponse)(nil), "rest.CallbackResponse")
	proto.RegisterEnum("rest.ResourcePolicyQuery_QueryType", ResourcePolicyQuery_QueryType_name, ResourcePolicyQuery_QueryType_value)
}

func init() { proto.RegisterFile("idm.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 960 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xc6, 0xf9, 0xf7, 0xc9, 0xb6, 0x0d, 0xd3, 0x6c, 0x70, 0x4a, 0x25, 0x82, 0xb9, 0x09, 0x42,
	0x38, 0x22, 0x0b, 0xbb, 0x70, 0x99, 0xba, 0xd5, 0xaa, 0xda, 0x34, 0x29, 0xd3, 0x94, 0x1f, 0x71,
	0x81, 0x5c, 0xfb, 0x34, 0xb5, 0xe2, 0x78, 0x82, 0xc7, 0xd9, 0x25, 0x2f, 0xc0, 0x5b, 0xf0, 0x06,
	0x88, 0x4b, 0xde, 0x86, 0x77, 0x41, 0x33, 0xf6, 0x38, 0x4e, 0x36, 0x4b, 0x41, 0x7b, 0xb3, 0x52,
	0x6f, 0xa2, 0x39, 0xdf, 0xf9, 0x99, 0xef, 0x7c, 0x67, 0x66, 0x62, 0xd0, 0x7d, 0x6f, 0x6e, 0x2d,
	0x22, 0x16, 0x33, 0x52, 0x8a, 0x90, 0xc7, 0x47, 0x5f, 0x4c, 0xfd, 0xf8, 0x6e, 0x79, 0x63, 0xb9,
	0x6c, 0xde, 0x5b, 0xac, 0x3c, 0x9f, 0xf5, 0x5c, 0x0c, 0x02, 0xde, 0x73, 0xd9, 0x7c, 0xce, 0xc2,
	0x9e, 0x0c, 0xed, 0xf9, 0xde, 0xbc, 0x97, 0x25, 0x1e, 0x7d, 0xfd, 0xef, 0x29, 0x1c, 0xa3, 0x97,
	0xbe, 0x8b, 0x69, 0x6a, 0x02, 0x26, 0x99, 0xe6, 0xef, 0x1a, 0x1c, 0x52, 0xe4, 0x6c, 0x19, 0xb9,
	0x78, 0xc9, 0x02, 0xdf, 0x5d, 0x7d, 0xbb, 0xc4, 0x68, 0x45, 0x9e, 0x41, 0x69, 0xb2, 0x5a, 0xa0,
	0xa1, 0x75, 0xb4, 0xee, 0x7e, 0xff, 0x13, 0x4b, 0x30, 0xb3, 0x76, 0x04, 0x5a, 0xf2, 0x57, 0x84,
	0x52, 0x99, 0x40, 0x5a, 0x50, 0xb9, 0xe6, 0x18, 0x9d, 0x7b, 0x46, 0xa1, 0xa3, 0x75, 0x75, 0x9a,
	0x5a, 0xe6, 0x57, 0xa0, 0x67, 0xa1, 0xa4, 0x0e, 0x55, 0x7b, 0x3c, 0x9a, 0x9c, 0xfd, 0x30, 0x69,
	0xbc, 0x47, 0xaa, 0x50, 0x1c, 0x8c, 0x7e, 0x6c, 0x68, 0xa4, 0x06, 0xa5, 0xd1, 0x78, 0x74, 0xd6,
	0x28, 0x88, 0xd5, 0xf5, 0xd5, 0x19, 0x6d, 0x14, 0xcd, 0x3f, 0x0a, 0xf0, 0xfe, 0x15, 0x3a, 0x91,
	0x7b, 0x47, 0x59, 0x80, 0x14, 0x7f, 0x59, 0x22, 0x8f, 0x89, 0x05, 0x55, 0x51, 0xcc, 0x47, 0x6e,
	0x68, 0x9d, 0x62, 0xb7, 0xde, 0x6f, 0x5a, 0x42, 0x0c, 0x11, 0x72, 0xe5, 0x87, 0xd3, 0x00, 0xe5,
	0x56, 0x54, 0x05, 0x91, 0x17, 0x3b, 0x9b, 0x34, 0xaa, 0x1d, 0xad, 0x5b, 0xef, 0xb7, 0xdf, 0xd8,
	0x1c, 0xdd, 0x29, 0x4d, 0x0b, 0x2a, 0xe3, 0xdb, 0x5b, 0x8e, 0xb1, 0xec, 0xb0, 0x48, 0x53, 0x8b,
	0x34, 0xa1, 0x3c, 0xf4, 0xe7, 0x7e, 0x6c, 0x14, 0x25, 0x9c, 0x18, 0xc4, 0x80, 0xea, 0xf3, 0x88,
	0x2d, 0x17, 0x27, 0x2b, 0xa3, 0xd4, 0xd1, 0xba, 0x65, 0xaa, 0x4c, 0x72, 0x0c, 0xba, 0xcd, 0x96,
	0x61, 0x3c, 0x0e, 0x83, 0x95, 0x51, 0xee, 0x68, 0xdd, 0x1a, 0x5d, 0x03, 0xe4, 0x4b, 0xd0, 0xc7,
	0x0b, 0x8c, 0x9c, 0xd8, 0x67, 0xa1, 0x51, 0x91, 0x53, 0x68, 0x59, 0xe9, 0x20, 0xad, 0xcc, 0x23,
	0x85, 0x5f, 0x07, 0x9a, 0x7d, 0x38, 0x10, 0x22, 0x70, 0x9b, 0x05, 0x01, 0xba, 0x02, 0x22, 0x1f,
	0x41, 0x59, 0x42, 0xa9, 0x52, 0x7a, 0xa6, 0x14, 0x4d, 0xf0, 0x9c, 0xc4, 0x62, 0x54, 0xf7, 0x48,
	0x2c, 0x42, 0x1e, 0xb6, 0xc4, 0x33, 0x38, 0x10, 0x22, 0xe4, 0x25, 0xfe, 0x18, 0x2a, 0x72, 0xc7,
	0x4d, 0x8d, 0xa5, 0x9a, 0xa9, 0x43, 0x4c, 0x41, 0x66, 0x19, 0x85, 0xed, 0x88, 0x04, 0x17, 0xad,
	0x4d, 0x58, 0xec, 0x04, 0xb2, 0xb5, 0x32, 0x4d, 0x0c, 0xb3, 0x0b, 0x8f, 0x4e, 0xfc, 0xd0, 0xa3,
	0xc8, 0x17, 0x2c, 0xe4, 0x28, 0x5a, 0xbd, 0x5a, 0xba, 0x2e, 0x72, 0x2e, 0x6f, 0x66, 0x8d, 0x2a,
	0xd3, 0xfc, 0x5b, 0x83, 0x46, 0x32, 0xc5, 0x81, 0x3d, 0x54, 0x43, 0xfc, 0x7c, 0x7b, 0x88, 0x87,
	0x72, 0xdf, 0x81, 0x3d, 0xdc, 0x39, 0xc3, 0x77, 0x59, 0x76, 0x1b, 0xf6, 0x06, 0xf6, 0x30, 0x27,
	0xfa, 0x31, 0x94, 0x06, 0xf6, 0x50, 0x35, 0x56, 0x53, 0x8d, 0x51, 0x89, 0xae, 0xe5, 0x2c, 0xe4,
	0xe5, 0xfc, 0xab, 0x00, 0xad, 0x44, 0xa4, 0xef, 0x59, 0x34, 0xe3, 0x0b, 0xc7, 0xcd, 0x9e, 0x94,
	0x27, 0xdb, 0x52, 0xb5, 0x65, 0xc5, 0x2c, 0xee, 0x61, 0x1f, 0xfa, 0x9f, 0xe0, 0x30, 0x53, 0x22,
	0x37, 0x03, 0x0b, 0x20, 0x83, 0x95, 0x6e, 0xfb, 0x9b, 0xba, 0xd1, 0x5c, 0xc4, 0x1b, 0xa6, 0x32,
	0x00, 0x22, 0xee, 0xc0, 0x05, 0xc6, 0x4e, 0xae, 0xf6, 0x67, 0xa0, 0x0b, 0xc4, 0x73, 0x62, 0x47,
	0x95, 0xde, 0xcb, 0x6e, 0x8d, 0xf0, 0xd0, 0xb5, 0xdf, 0xbc, 0x86, 0x0f, 0x15, 0x3c, 0x72, 0xe6,
	0xb8, 0xcd, 0xf3, 0x29, 0x40, 0x06, 0xab, 0x62, 0xad, 0x8d, 0x62, 0x99, 0x9b, 0xe6, 0x22, 0xcd,
	0x67, 0xf0, 0xc1, 0xd0, 0xe7, 0xb1, 0x0a, 0x9a, 0x38, 0x53, 0xae, 0xce, 0xcb, 0x31, 0xe8, 0x59,
	0xa0, 0xbc, 0x8b, 0x3a, 0x5d, 0x03, 0xa6, 0x05, 0xc6, 0xeb, 0x89, 0xe9, 0x1d, 0x26, 0x50, 0x12,
	0xb6, 0xa4, 0xa1, 0x53, 0xb9, 0x36, 0x9f, 0xc3, 0xe3, 0xcb, 0x65, 0x3e, 0xfc, 0x3f, 0x6d, 0x43,
	0x1a, 0x50, 0x9c, 0x38, 0xd3, 0xf4, 0x9f, 0x56, 0x2c, 0xcd, 0x3e, 0xb4, 0xb6, 0x0b, 0xdd, 0xfb,
	0x74, 0x5c, 0x40, 0xfb, 0x14, 0x03, 0x8c, 0xf1, 0x7f, 0xf7, 0x99, 0xf5, 0x92, 0x30, 0x48, 0x7a,
	0x79, 0x0a, 0x47, 0xbb, 0xca, 0xdd, 0x4b, 0xa3, 0x05, 0x4d, 0x91, 0x71, 0xc2, 0xd8, 0x6c, 0xee,
	0x44, 0x33, 0xc5, 0xc0, 0xfc, 0x14, 0xf6, 0x28, 0xbe, 0x64, 0xb3, 0xec, 0xaa, 0x1a, 0x50, 0x9d,
	0xb0, 0x19, 0x86, 0xe7, 0x5e, 0x4a, 0x48, 0x99, 0xe6, 0x29, 0xec, 0xab, 0xd0, 0xfb, 0xb6, 0x13,
	0x9e, 0x0b, 0xe4, 0xdc, 0x99, 0x62, 0xca, 0x5e, 0x99, 0xe6, 0x37, 0xd0, 0xa6, 0xc8, 0x31, 0xbe,
	0x74, 0x38, 0x7f, 0xc5, 0x22, 0x4f, 0x56, 0xcf, 0xe9, 0x21, 0x58, 0x0e, 0xd9, 0xd4, 0x0f, 0x95,
	0x1e, 0x19, 0x60, 0x5e, 0xc2, 0xd1, 0xae, 0xd4, 0xb7, 0x20, 0xf3, 0x9b, 0x06, 0xcd, 0x8d, 0x92,
	0xeb, 0x3f, 0x68, 0xf2, 0xfa, 0x56, 0x29, 0xa3, 0x1d, 0x9e, 0x4d, 0xe2, 0x85, 0x2d, 0xe2, 0xa4,
	0x03, 0xf5, 0x11, 0xbe, 0x52, 0x19, 0xf2, 0xa9, 0xd1, 0x69, 0x1e, 0x32, 0x5f, 0xc0, 0xe3, 0x2d,
	0x1e, 0x6f, 0xd1, 0xd5, 0x77, 0x70, 0x60, 0x3b, 0x41, 0x70, 0xe3, 0xb8, 0x33, 0xd5, 0x4f, 0x13,
	0xca, 0x3c, 0x76, 0x62, 0x75, 0xc8, 0x12, 0x43, 0x1c, 0x30, 0x97, 0x79, 0x2a, 0x5f, 0xae, 0x49,
	0x1b, 0x6a, 0xbe, 0xf7, 0x73, 0x2c, 0xfb, 0x4d, 0x88, 0x56, 0xfd, 0xa4, 0x49, 0xf3, 0x4f, 0x0d,
	0x1a, 0xeb, 0xc2, 0x29, 0xc1, 0x0e, 0xd4, 0x07, 0x92, 0x50, 0x5e, 0xa2, 0x3c, 0x24, 0xb4, 0x91,
	0x0b, 0xf9, 0xc9, 0x9b, 0x6a, 0x93, 0x01, 0xc2, 0x7b, 0xf6, 0xeb, 0xc2, 0x8f, 0x90, 0x9f, 0x87,
	0xe9, 0x23, 0xbc, 0x06, 0x88, 0x09, 0x8f, 0x28, 0xde, 0x46, 0xc8, 0xef, 0x92, 0xf2, 0x25, 0x99,
	0xbe, 0x81, 0x09, 0x21, 0xce, 0x4f, 0x13, 0x77, 0x39, 0x21, 0x9c, 0x9a, 0x37, 0x15, 0xf9, 0x19,
	0xfe, 0xe4, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x98, 0xcc, 0x27, 0x2e, 0x06, 0x0c, 0x00, 0x00,
}
