<<<<<<< HEAD
{"version":3,"sources":["../../js/containers/Auth.js"],"names":["INITIAL_STATE","uid","isAnonymous","Auth","state","handleSignIn","userManager","context","oidc","signinPopup","handleSignOut","auth","firebase","signOut","events","addUserLoaded","loadedUser","console","log","user","setState","isAuthed","props","children","signIn","React","Component","propTypes","PropTypes","func","isRequired","contextTypes","object"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,gBAAgB;AACpBC,OAAK,EADe;AAEpBC,eAAa;AACb;AACA;AACA;AACA;AANoB,CAAtB;;IASMC,I;;;;;;;;;;;;;;kLASJC,K,GAAQJ,a,QA0BRK,Y,GAAe,oBAAY;AAAA,UAEfC,WAFe,GAEC,MAAKC,OAAL,CAAaC,IAFd,CAEfF,WAFe;;;AAMvBA,kBAAYG,WAAZ;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,K,QAEDC,a,GAAgB,YAAM;AAAA,UACZC,IADY,GACH,MAAKJ,OAAL,CAAaK,QADV,CACZD,IADY;;;AAGpB,aAAOA,OAAOE,OAAP,EAAP;AACD,K;;;;;wCApEmB;AAAA,UACVP,WADU,GACM,KAAKC,OAAL,CAAaC,IADnB,CACVF,WADU;;;AAGlBA,kBAAYQ,MAAZ,CAAmBC,aAAnB,CAAiC,UAAUC,UAAV,EAAsB;AACnDC,gBAAQC,GAAR,CAAY,YAAZ,EAA0BF,UAA1B;AACH,OAFD;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;;2CAEsB;AACpB;AACF;;;2BAgDMG,I,EAAM;AAAA,UACHlB,GADG,GACkBkB,IADlB,CACHlB,GADG;AAAA,UACEC,WADF,GACkBiB,IADlB,CACEjB,WADF;;;AAGX,WAAKkB,QAAL,CAAc;AACZnB,gBADY;AAEZC;AAFY,OAAd;AAID;;;8BAES;AACR,WAAKkB,QAAL,CAAcpB,aAAd;AACD;;;6BAEQ;AACP;AACA;AACA;AACA,UAAMqB,WAAW,CAAC,EAAE,KAAKjB,KAAL,CAAWH,GAAX,IAAkB,CAAC,KAAKG,KAAL,CAAWF,WAAhC,CAAlB;;AAEA,aAAO,KAAKoB,KAAL,CAAWC,QAAX,cACF,KAAKnB,KADH;AAELoB,gBAAQ,KAAKnB,YAFR;AAGLQ,iBAAS,KAAKH,aAHT;AAILW;AAJK,SAAP;AAMD;;;;EA1GgBI,gBAAMC,S;;AAAnBvB,I,CACGwB,S,GAAY;AACjBJ,YAAUK,oBAAUC,IAAV,CAAeC;AADR,C;AADf3B,I,CAKG4B,Y,GAAe;AAClBvB,QAAMoB,oBAAUI;AADE,C;kBAwGT7B,I","file":"Auth.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst INITIAL_STATE = {\n  uid: '',\n  isAnonymous: null,\n  // // some other properties from the user object that may be useful\n  // email: '',\n  // displayName: '',\n  // photoURL: '',\n};\n\nclass Auth extends React.Component {\n  static propTypes = {\n    children: PropTypes.func.isRequired,\n  };\n\n  static contextTypes = {\n      oidc: PropTypes.object,\n  };\n\n  state = INITIAL_STATE;\n\n  componentDidMount() {\n    const { userManager } = this.context.oidc;\n\n    userManager.events.addUserLoaded(function (loadedUser) {\n        console.log(\"HERE WE GO\", loadedUser);\n    });\n\n    //\n    // // onAuthStateChanged returns an unsubscribe method\n    // this.stopAuthListener = auth().onAuthStateChanged(user => {\n    //   if (user) {\n    //     // if user exists sign-in!\n    //     this.signIn(user);\n    //   } else {\n    //     // otherwise sign-out!\n    //     this.signOut();\n    //   }\n    // });\n  }\n\n  componentWillUnmount() {\n     // this.stopAuthListener();\n  }\n\n  handleSignIn = provider => {\n\n      const { userManager } = this.context.oidc;\n\n\n\n      userManager.signinPopup();\n\n    // const { auth } = this.context.firebase;\n    //\n    // switch (provider) {\n    //   // the auth listener will handle the success cases\n    //   case 'google':\n    //     return auth()\n    //       .signInWithPopup(new auth.GoogleAuthProvider())\n    //       .catch(error => {\n    //         // eslint-disable-next-line no-console\n    //         console.error(error);\n    //         // TODO: notify the user of the error\n    //         return error;\n    //       });\n    //\n    //   case 'anonymous':\n    //     return auth()\n    //       .signInAnonymously()\n    //       .catch(error => {\n    //         // eslint-disable-next-line no-console\n    //         console.error(error);\n    //         // TODO: notify the user of the error\n    //         return error;\n    //       });\n    //\n    //   default:\n    //     const reason = 'Invalid provider passed to signIn method';\n    //     // eslint-disable-next-line no-console\n    //     console.error(reason);\n    //     return Promise.reject(reason);\n    // }\n  };\n\n  handleSignOut = () => {\n    const { auth } = this.context.firebase;\n\n    return auth().signOut();\n  };\n\n  signIn(user) {\n    const { uid, isAnonymous } = user;\n\n    this.setState({\n      uid,\n      isAnonymous,\n    });\n  }\n\n  signOut() {\n    this.setState(INITIAL_STATE);\n  }\n\n  render() {\n    // If uid doesn't exist in state, the user is not signed in.\n    // A uid will exist if the user is signed in anonymously.\n    // We'll consider anonymous users as unauthed for this variable.\n    const isAuthed = !!(this.state.uid && !this.state.isAnonymous);\n\n    return this.props.children({\n      ...this.state,\n      signIn: this.handleSignIn,\n      signOut: this.handleSignOut,\n      isAuthed,\n    });\n  }\n}\n\nexport default Auth;\n"]}
=======
{"version":3,"sources":["../../js/containers/Auth.js"],"names":["INITIAL_STATE","uid","isAnonymous","Auth","state","handleSignIn","userManager","context","oidc","signinPopup","handleSignOut","auth","firebase","signOut","console","log","user","setState","isAuthed","props","children","signIn","React","Component","propTypes","PropTypes","func","isRequired","contextTypes","object"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,gBAAgB;AACpBC,OAAK,EADe;AAEpBC,eAAa;AACb;AACA;AACA;AACA;AANoB,CAAtB;;IASMC,I;;;;;;;;;;;;;;kLASJC,K,GAAQJ,a,QAwBRK,Y,GAAe,oBAAY;AAAA,UAEfC,WAFe,GAEC,MAAKC,OAAL,CAAaC,IAFd,CAEfF,WAFe;;;AAMvBA,kBAAYG,WAAZ;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,K,QAEDC,a,GAAgB,YAAM;AAAA,UACZC,IADY,GACH,MAAKJ,OAAL,CAAaK,QADV,CACZD,IADY;;;AAGpB,aAAOA,OAAOE,OAAP,EAAP;AACD,K;;;;;wCAlEmB;AAAA,UACVP,WADU,GACM,KAAKC,OAAL,CAAaC,IADnB,CACVF,WADU;;;AAGlBQ,cAAQC,GAAR,CAAYT,WAAZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;;2CAEsB;AACpB;AACF;;;2BAgDMU,I,EAAM;AAAA,UACHf,GADG,GACkBe,IADlB,CACHf,GADG;AAAA,UACEC,WADF,GACkBc,IADlB,CACEd,WADF;;;AAGX,WAAKe,QAAL,CAAc;AACZhB,gBADY;AAEZC;AAFY,OAAd;AAID;;;8BAES;AACR,WAAKe,QAAL,CAAcjB,aAAd;AACD;;;6BAEQ;AACP;AACA;AACA;AACA,UAAMkB,WAAW,CAAC,EAAE,KAAKd,KAAL,CAAWH,GAAX,IAAkB,CAAC,KAAKG,KAAL,CAAWF,WAAhC,CAAlB;;AAEA,aAAO,KAAKiB,KAAL,CAAWC,QAAX,cACF,KAAKhB,KADH;AAELiB,gBAAQ,KAAKhB,YAFR;AAGLQ,iBAAS,KAAKH,aAHT;AAILQ;AAJK,SAAP;AAMD;;;;EAxGgBI,gBAAMC,S;;AAAnBpB,I,CACGqB,S,GAAY;AACjBJ,YAAUK,oBAAUC,IAAV,CAAeC;AADR,C;AADfxB,I,CAKGyB,Y,GAAe;AAClBpB,QAAMiB,oBAAUI;AADE,C;kBAsGT1B,I","file":"Auth.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst INITIAL_STATE = {\n  uid: '',\n  isAnonymous: null,\n  // // some other properties from the user object that may be useful\n  // email: '',\n  // displayName: '',\n  // photoURL: '',\n};\n\nclass Auth extends React.Component {\n  static propTypes = {\n    children: PropTypes.func.isRequired,\n  };\n\n  static contextTypes = {\n      oidc: PropTypes.object,\n  };\n\n  state = INITIAL_STATE;\n\n  componentDidMount() {\n    const { userManager } = this.context.oidc;\n\n    console.log(userManager)\n    \n    //\n    // // onAuthStateChanged returns an unsubscribe method\n    // this.stopAuthListener = auth().onAuthStateChanged(user => {\n    //   if (user) {\n    //     // if user exists sign-in!\n    //     this.signIn(user);\n    //   } else {\n    //     // otherwise sign-out!\n    //     this.signOut();\n    //   }\n    // });\n  }\n\n  componentWillUnmount() {\n     // this.stopAuthListener();\n  }\n\n  handleSignIn = provider => {\n\n      const { userManager } = this.context.oidc;\n\n\n\n      userManager.signinPopup();\n\n    // const { auth } = this.context.firebase;\n    //\n    // switch (provider) {\n    //   // the auth listener will handle the success cases\n    //   case 'google':\n    //     return auth()\n    //       .signInWithPopup(new auth.GoogleAuthProvider())\n    //       .catch(error => {\n    //         // eslint-disable-next-line no-console\n    //         console.error(error);\n    //         // TODO: notify the user of the error\n    //         return error;\n    //       });\n    //\n    //   case 'anonymous':\n    //     return auth()\n    //       .signInAnonymously()\n    //       .catch(error => {\n    //         // eslint-disable-next-line no-console\n    //         console.error(error);\n    //         // TODO: notify the user of the error\n    //         return error;\n    //       });\n    //\n    //   default:\n    //     const reason = 'Invalid provider passed to signIn method';\n    //     // eslint-disable-next-line no-console\n    //     console.error(reason);\n    //     return Promise.reject(reason);\n    // }\n  };\n\n  handleSignOut = () => {\n    const { auth } = this.context.firebase;\n\n    return auth().signOut();\n  };\n\n  signIn(user) {\n    const { uid, isAnonymous } = user;\n\n    this.setState({\n      uid,\n      isAnonymous,\n    });\n  }\n\n  signOut() {\n    this.setState(INITIAL_STATE);\n  }\n\n  render() {\n    // If uid doesn't exist in state, the user is not signed in.\n    // A uid will exist if the user is signed in anonymously.\n    // We'll consider anonymous users as unauthed for this variable.\n    const isAuthed = !!(this.state.uid && !this.state.isAnonymous);\n\n    return this.props.children({\n      ...this.state,\n      signIn: this.handleSignIn,\n      signOut: this.handleSignOut,\n      isAuthed,\n    });\n  }\n}\n\nexport default Auth;\n"]}
>>>>>>> 31a5342865f65bb395624a7bba534e3db2278552
