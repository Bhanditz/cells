{"version":3,"sources":["../../js/containers/Auth.js"],"names":["INITIAL_STATE","uid","isAnonymous","Auth","state","handleSignIn","userManager","context","oidc","signinPopup","handleSignOut","auth","firebase","signOut","stopAuthListener","user","setState","isAuthed","props","children","signIn","React","Component","propTypes","PropTypes","func","isRequired","contextTypes","object"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;;;;;;;;;AAEA,IAAMA,gBAAgB;AACpBC,OAAK,EADe;AAEpBC,eAAa;AACb;AACA;AACA;AACA;AANoB,CAAtB;;IASMC,I;;;;;;;;;;;;;;kLASJC,K,GAAQJ,a,QAsBRK,Y,GAAe,oBAAY;AAAA,UAEfC,WAFe,GAEC,MAAKC,OAAL,CAAaC,IAFd,CAEfF,WAFe;;;AAIvBA,kBAAYG,WAAZ;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,K,QAEDC,a,GAAgB,YAAM;AAAA,UACZC,IADY,GACH,MAAKJ,OAAL,CAAaK,QADV,CACZD,IADY;;;AAGpB,aAAOA,OAAOE,OAAP,EAAP;AACD,K;;;;;wCA9DmB;AAAA,UACVP,WADU,GACM,KAAKC,OAAL,CAAaC,IADnB,CACVF,WADU;;AAGlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;;2CAEsB;AACrB,WAAKQ,gBAAL;AACD;;;2BA8CMC,I,EAAM;AAAA,UACHd,GADG,GACkBc,IADlB,CACHd,GADG;AAAA,UACEC,WADF,GACkBa,IADlB,CACEb,WADF;;;AAGX,WAAKc,QAAL,CAAc;AACZf,gBADY;AAEZC;AAFY,OAAd;AAID;;;8BAES;AACR,WAAKc,QAAL,CAAchB,aAAd;AACD;;;6BAEQ;AACP;AACA;AACA;AACA,UAAMiB,WAAW,CAAC,EAAE,KAAKb,KAAL,CAAWH,GAAX,IAAkB,CAAC,KAAKG,KAAL,CAAWF,WAAhC,CAAlB;;AAEA,aAAO,KAAKgB,KAAL,CAAWC,QAAX,cACF,KAAKf,KADH;AAELgB,gBAAQ,KAAKf,YAFR;AAGLQ,iBAAS,KAAKH,aAHT;AAILO;AAJK,SAAP;AAMD;;;;EApGgBI,gBAAMC,S;;AAAnBnB,I,CACGoB,S,GAAY;AACjBJ,YAAUK,oBAAUC,IAAV,CAAeC;AADR,C;AADfvB,I,CAKGwB,Y,GAAe;AAClBnB,QAAMgB,oBAAUI;AADE,C;kBAkGTzB,I","file":"Auth-compiled.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst INITIAL_STATE = {\n  uid: '',\n  isAnonymous: null,\n  // // some other properties from the user object that may be useful\n  // email: '',\n  // displayName: '',\n  // photoURL: '',\n};\n\nclass Auth extends React.Component {\n  static propTypes = {\n    children: PropTypes.func.isRequired,\n  };\n\n  static contextTypes = {\n      oidc: PropTypes.object,\n  };\n\n  state = INITIAL_STATE;\n\n  componentDidMount() {\n    const { userManager } = this.context.oidc;\n\n    //\n    // // onAuthStateChanged returns an unsubscribe method\n    // this.stopAuthListener = auth().onAuthStateChanged(user => {\n    //   if (user) {\n    //     // if user exists sign-in!\n    //     this.signIn(user);\n    //   } else {\n    //     // otherwise sign-out!\n    //     this.signOut();\n    //   }\n    // });\n  }\n\n  componentWillUnmount() {\n    this.stopAuthListener();\n  }\n\n  handleSignIn = provider => {\n\n      const { userManager } = this.context.oidc;\n\n      userManager.signinPopup();\n      \n    // const { auth } = this.context.firebase;\n    //\n    // switch (provider) {\n    //   // the auth listener will handle the success cases\n    //   case 'google':\n    //     return auth()\n    //       .signInWithPopup(new auth.GoogleAuthProvider())\n    //       .catch(error => {\n    //         // eslint-disable-next-line no-console\n    //         console.error(error);\n    //         // TODO: notify the user of the error\n    //         return error;\n    //       });\n    //\n    //   case 'anonymous':\n    //     return auth()\n    //       .signInAnonymously()\n    //       .catch(error => {\n    //         // eslint-disable-next-line no-console\n    //         console.error(error);\n    //         // TODO: notify the user of the error\n    //         return error;\n    //       });\n    //\n    //   default:\n    //     const reason = 'Invalid provider passed to signIn method';\n    //     // eslint-disable-next-line no-console\n    //     console.error(reason);\n    //     return Promise.reject(reason);\n    // }\n  };\n\n  handleSignOut = () => {\n    const { auth } = this.context.firebase;\n\n    return auth().signOut();\n  };\n\n  signIn(user) {\n    const { uid, isAnonymous } = user;\n\n    this.setState({\n      uid,\n      isAnonymous,\n    });\n  }\n\n  signOut() {\n    this.setState(INITIAL_STATE);\n  }\n\n  render() {\n    // If uid doesn't exist in state, the user is not signed in.\n    // A uid will exist if the user is signed in anonymously.\n    // We'll consider anonymous users as unauthed for this variable.\n    const isAuthed = !!(this.state.uid && !this.state.isAnonymous);\n\n    return this.props.children({\n      ...this.state,\n      signIn: this.handleSignIn,\n      signOut: this.handleSignOut,\n      isAuthed,\n    });\n  }\n}\n\nexport default Auth;\n"]}